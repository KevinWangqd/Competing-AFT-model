set.seed(123)


## Type I censorship (truncated with endpoint)
n = 1000

alpha1 = 1.6
beta1 = 1.2
sigma1 = 1

alpha2 = 1.2
beta2 = 2
sigma2 = 1


alpha3 = 2.1
beta3 = 1
sigma3 = 1.1

X1 = rnorm(n)
X2 = rnorm(n)
X3 = rnorm(n)


X = cbind(X1, X2, X3)

scale1 = exp(X1*beta1+alpha1)
scale2 = exp(X2*beta2+alpha2)
scale3 = exp(X3*beta3+alpha3)

T1 = rep(NA,n)
T2 = rep(NA,n)
T3 = rep(NA,n)
T = rep(NA,n)


for (i in 1:n) {
  T1[i] = rweibull(1,scale=scale1[i], shape = 1/sigma1)
  T2[i] = rweibull(1,scale=scale2[i], shape = 1/sigma2)
  T3[i] = rweibull(1,scale=scale3[i], shape = 1/sigma3)
  T[i] = min(T1[i], T2[i], T3[i])
}



## random censorship 
pi <- 0.1 # censorship rate

f <- function(lambda){
  mean(punif(T, min = 0, max =lambda)-pi)
}

lambda = uniroot(f, interval = c(0.0001, 10^6))$root
C <- runif(n, 0, lambda)
delta = rep(1,n)
for (i in 1:n) {
  if(T[i]>C[i]){
    T[i] = C[i]
    delta[i] = 0
  }
}

sum(delta)/n

Y=log(T)

label = list(c(1), c(2), c(3))


# Print transformed data to check the result
transformed_data = data_transform(Y, delta, X, label)

# with defaul initialization
init_param = param_init(X, label)
init_param


## with initialization
p <- vector("list") 
p$alpha = list(1,1,1)
p$beta = list(0,0,0)
p$sigma =list(1,1,1)
init_param = param_init(X, label, p)

init_param