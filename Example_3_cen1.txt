set.seed(1234)
n = 1500

sigma1 = 1
alpha1 = 1
beta11 = -3
beta12 = 2


sigma2 = 1
alpha2 = 1.5
beta22 = 0
beta23 = 2
beta24 = 2


sigma3 = 1.1
alpha3 = 1
beta34 = 0
beta35 = -2
beta36 = 3


X1 = rnorm(n)
X2 = rnorm(n)
X3 = rnorm(n)
X4 = rnorm(n)
X5 = rnorm(n)
X6 = rnorm(n)

X = cbind(X1, X2, X3, X4, X5, X6)

scale1 = exp(X1*beta11 + X2*beta12 + alpha1)
scale2 = exp(X2*beta22 + X3*beta23 + X4*beta24 + alpha2)
scale3 = exp(X4*beta34 + X5*beta35 + X6*beta36 + alpha3)

T1 = rep(NA,n)
T2 = rep(NA,n)
T3 = rep(NA,n)
T = rep(NA,n)

#set.seed(12)
for (i in 1:n) {
  T1[i] = rweibull(1,scale=scale1[i], shape = 1/sigma1)
  T2[i] = rweibull(1,scale=scale2[i], shape = 1/sigma2)
  T3[i] = rweibull(1,scale=scale3[i], shape = 1/sigma3)
  T[i] = min(T1[i], T2[i], T3[i])
}





delta = rep(1,n)
## random censorship 
pi <- 0.1 # censorship rate

f <- function(lambda){
  mean(punif(T, min = min(T), max =lambda)-pi)
}

lambda = uniroot(f, interval = c(0.0001, 10^6))$root

set.seed(123)
C <- runif(n, min(T), lambda)
delta = rep(1,n)
for (i in 1:n) {
  if(T[i]>C[i]){
    T[i] = C[i]
    delta[i] = 0
  }
}

sum(delta)/n
sum(delta)
Y=log(T)

label = list(c(1),c(1,2), c(2),c(2,3), 3, 3)
### you may run the data_transform(T, delta, X, label) code and then fit this example
## For this example, the fisher information leads to NaN calculation
## here is the result for estimates.
# Print transformed data to check the result
transformed_data = data_transform(Y, delta, X, label)

# with defaul initialization
init_param = param_init(X, label)
init_param